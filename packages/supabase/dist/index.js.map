{"version":3,"sources":["../src/index.ts","../src/client.ts","../src/types.ts","../src/auth-helpers.ts","../src/storage.ts","../src/realtime.ts","../src/database.ts"],"sourcesContent":["// Supabase integration for the SaaS platform\n\n// Client configurations\nexport { createClient, createServerClient, createAdminClient } from './client'\n\n// TypeScript types\nexport type { \n  Database, \n  TypedSupabaseClient,\n  UserRole,\n  SubscriptionStatus,\n  Tables,\n  TableInserts,\n  TableUpdates,\n  TableRows,\n  TablesInsert,\n  TablesUpdate,\n  Enums,\n  CompositeTypes,\n  Json\n} from './types'\n\n// Export type constants\nexport { Constants } from './types'\n\n// Authentication utilities\nexport * from './auth-helpers'\n\n// Storage utilities\nexport * from './storage'\n\n// Realtime utilities\nexport * from './realtime'\n\n// Database operations\nexport * from './database'\n\n// Version\nexport const SUPABASE_VERSION = '0.1.0'\n","import { createBrowserClient, createServerClient as createSupabaseServerClient } from '@supabase/ssr'\nimport type { CookieOptions } from '@supabase/ssr'\n\n/**\n * Create a Supabase client for browser use\n * This client is used in Client Components and browser-side operations\n */\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}\n\n/**\n * Create a Supabase client for server use\n * This client is used in Server Components, API routes, and server-side operations\n * Requires Next.js cookies() function to be passed in\n */\nexport function createServerClient(\n  cookieStore: {\n    getAll: () => { name: string; value: string }[]\n    set: (name: string, value: string, options?: CookieOptions) => void\n  }\n) {\n  return createSupabaseServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet: Array<{ name: string; value: string; options?: CookieOptions }>) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n\n/**\n * Create a Supabase client with service role key for admin operations\n * Use with caution - only for server-side admin operations\n */\nexport function createAdminClient() {\n  if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n    throw new Error('SUPABASE_SERVICE_ROLE_KEY environment variable is not set')\n  }\n\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!\n  )\n} ","export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  public: {\n    Tables: {\n      products: {\n        Row: {\n          created_at: string\n          description: string | null\n          id: string\n          name: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          description?: string | null\n          id?: string\n          name: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          description?: string | null\n          id?: string\n          name?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      subscriptions: {\n        Row: {\n          created_at: string\n          current_period_end: string\n          current_period_start: string\n          id: string\n          product_id: string\n          status: Database[\"public\"][\"Enums\"][\"subscription_status\"]\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          created_at?: string\n          current_period_end: string\n          current_period_start: string\n          id?: string\n          product_id: string\n          status?: Database[\"public\"][\"Enums\"][\"subscription_status\"]\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          created_at?: string\n          current_period_end?: string\n          current_period_start?: string\n          id?: string\n          product_id?: string\n          status?: Database[\"public\"][\"Enums\"][\"subscription_status\"]\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"subscriptions_product_id_fkey\"\n            columns: [\"product_id\"]\n            isOneToOne: false\n            referencedRelation: \"products\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"subscriptions_user_id_fkey\"\n            columns: [\"user_id\"]\n            isOneToOne: false\n            referencedRelation: \"users\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      user_products: {\n        Row: {\n          created_at: string\n          id: string\n          product_id: string\n          role: Database[\"public\"][\"Enums\"][\"user_role\"]\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          created_at?: string\n          id?: string\n          product_id: string\n          role?: Database[\"public\"][\"Enums\"][\"user_role\"]\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          product_id?: string\n          role?: Database[\"public\"][\"Enums\"][\"user_role\"]\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"user_products_product_id_fkey\"\n            columns: [\"product_id\"]\n            isOneToOne: false\n            referencedRelation: \"products\"\n            referencedColumns: [\"id\"]\n          },\n          {\n            foreignKeyName: \"user_products_user_id_fkey\"\n            columns: [\"user_id\"]\n            isOneToOne: false\n            referencedRelation: \"users\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      users: {\n        Row: {\n          created_at: string\n          email: string\n          id: string\n          updated_at: string\n        }\n        Insert: {\n          created_at?: string\n          email: string\n          id: string\n          updated_at?: string\n        }\n        Update: {\n          created_at?: string\n          email?: string\n          id?: string\n          updated_at?: string\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      subscription_status:\n        | \"active\"\n        | \"canceled\"\n        | \"incomplete\"\n        | \"incomplete_expired\"\n        | \"past_due\"\n        | \"trialing\"\n        | \"unpaid\"\n      user_role: \"owner\" | \"admin\" | \"member\" | \"viewer\"\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DefaultSchema = Database[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? (Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R\n      }\n      ? R\n      : never\n    : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I\n      }\n      ? I\n      : never\n    : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof Database },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U\n      }\n      ? U\n      : never\n    : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof Database },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends { schema: keyof Database }\n  ? Database[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof Database },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof Database\n  }\n    ? keyof Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }\n  ? Database[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never\n\nimport type { createClient } from './client'\n\n/**\n * Supabase client type with Database types\n */\nexport type TypedSupabaseClient = ReturnType<typeof createClient>\n\n/**\n * Common user role types for multi-tenant architecture\n */\nexport type UserRole = Database[\"public\"][\"Enums\"][\"user_role\"]\n\n/**\n * Subscription status types\n */\nexport type SubscriptionStatus = Database[\"public\"][\"Enums\"][\"subscription_status\"]\n\n/**\n * Utility type for table rows\n */\nexport type TableRows<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']\n\n/**\n * Utility type for table inserts\n */\nexport type TableInserts<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert']\n\n/**\n * Utility type for table updates\n */\nexport type TableUpdates<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update']\n\n/**\n * Type constants for enums (useful for forms, dropdowns, etc.)\n */\nexport const Constants = {\n  public: {\n    Enums: {\n      subscription_status: [\n        \"active\",\n        \"canceled\",\n        \"incomplete\",\n        \"incomplete_expired\",\n        \"past_due\",\n        \"trialing\",\n        \"unpaid\",\n      ],\n      user_role: [\"owner\", \"admin\", \"member\", \"viewer\"],\n    },\n  },\n} as const ","import type { User, Session } from '@supabase/supabase-js'\n\nimport type { TypedSupabaseClient } from './types'\n\n/**\n * Authentication helper functions for Supabase\n */\n\n/**\n * Get the current user from the Supabase client\n */\nexport async function getCurrentUser(supabase: TypedSupabaseClient): Promise<User | null> {\n  try {\n    const { data: { user }, error } = await supabase.auth.getUser()\n    \n    if (error) {\n      return null\n    }\n    \n    return user\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Get the current session from the Supabase client\n */\nexport async function getCurrentSession(supabase: TypedSupabaseClient): Promise<Session | null> {\n  try {\n    const { data: { session }, error } = await supabase.auth.getSession()\n    \n    if (error) {\n      return null\n    }\n    \n    return session\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Sign in with email and password\n */\nexport async function signInWithPassword(\n  supabase: TypedSupabaseClient,\n  email: string,\n  password: string\n) {\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  })\n\n  return { data, error }\n}\n\n/**\n * Sign up with email and password\n */\nexport async function signUpWithPassword(\n  supabase: TypedSupabaseClient,\n  email: string,\n  password: string,\n  options?: {\n    emailRedirectTo?: string\n    data?: Record<string, any>\n  }\n) {\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n    options,\n  })\n\n  return { data, error }\n}\n\n/**\n * Sign in with OAuth provider\n */\nexport async function signInWithOAuth(\n  supabase: TypedSupabaseClient,\n  provider: 'google' | 'github' | 'apple' | 'azure' | 'bitbucket' | 'discord' | 'facebook' | 'figma' | 'gitlab' | 'linkedin' | 'notion' | 'slack' | 'spotify' | 'twitch' | 'twitter' | 'workos',\n  options?: {\n    redirectTo?: string\n    scopes?: string\n    queryParams?: Record<string, string>\n  }\n) {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider,\n    options,\n  })\n\n  return { data, error }\n}\n\n/**\n * Sign out the current user\n */\nexport async function signOut(supabase: TypedSupabaseClient) {\n  const { error } = await supabase.auth.signOut()\n  return { error }\n}\n\n/**\n * Reset password via email\n */\nexport async function resetPassword(\n  supabase: TypedSupabaseClient,\n  email: string,\n  redirectTo?: string\n) {\n  const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\n    redirectTo,\n  })\n\n  return { data, error }\n}\n\n/**\n * Update user password\n */\nexport async function updatePassword(\n  supabase: TypedSupabaseClient,\n  password: string\n) {\n  const { data, error } = await supabase.auth.updateUser({\n    password,\n  })\n\n  return { data, error }\n}\n\n/**\n * Update user metadata\n */\nexport async function updateUserMetadata(\n  supabase: TypedSupabaseClient,\n  data: Record<string, any>\n) {\n  const { data: userData, error } = await supabase.auth.updateUser({\n    data,\n  })\n\n  return { data: userData, error }\n}\n\n/**\n * Check if user is authenticated\n */\nexport async function isAuthenticated(supabase: TypedSupabaseClient): Promise<boolean> {\n  const user = await getCurrentUser(supabase)\n  return user !== null\n}\n\n/**\n * Get user ID if authenticated\n */\nexport async function getUserId(supabase: TypedSupabaseClient): Promise<string | null> {\n  const user = await getCurrentUser(supabase)\n  return user?.id || null\n} ","import type { TypedSupabaseClient } from './types'\n\n/**\n * Storage utility functions for Supabase Storage\n */\n\n/**\n * Upload a file to Supabase Storage\n */\nexport async function uploadFile(\n  supabase: TypedSupabaseClient,\n  bucket: string,\n  path: string,\n  file: File | Blob | ArrayBuffer | FormData,\n  options?: {\n    cacheControl?: string\n    contentType?: string\n    duplex?: string\n    upsert?: boolean\n  }\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage\n    .from(bucket)\n    .upload(path, file, options)\n\n  return { data, error }\n}\n\n/**\n * Download a file from Supabase Storage\n */\nexport async function downloadFile(\n  supabase: TypedSupabaseClient,\n  bucket: string,\n  path: string\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage\n    .from(bucket)\n    .download(path)\n\n  return { data, error }\n}\n\n/**\n * Get a public URL for a file in Supabase Storage\n */\nexport function getPublicUrl(\n  supabase: TypedSupabaseClient,\n  bucket: string,\n  path: string,\n  options?: {\n    download?: boolean | string\n  }\n): { publicUrl: string } {\n  const { data } = supabase.storage\n    .from(bucket)\n    .getPublicUrl(path, options)\n\n  return data\n}\n\n/**\n * Create a signed URL for a file with expiration\n */\nexport async function createSignedUrl(\n  supabase: TypedSupabaseClient,\n  bucket: string,\n  path: string,\n  expiresIn: number,\n  options?: {\n    download?: boolean | string\n  }\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage\n    .from(bucket)\n    .createSignedUrl(path, expiresIn, options)\n\n  return { data, error }\n}\n\n/**\n * Create multiple signed URLs\n */\nexport async function createSignedUrls(\n  supabase: TypedSupabaseClient,\n  bucket: string,\n  paths: string[],\n  expiresIn: number,\n  options?: {\n    download: boolean | string\n  }\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage\n    .from(bucket)\n    .createSignedUrls(paths, expiresIn, options)\n\n  return { data, error }\n}\n\n/**\n * Delete a file from Supabase Storage\n */\nexport async function deleteFile(\n  supabase: TypedSupabaseClient,\n  bucket: string,\n  paths: string[]\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage\n    .from(bucket)\n    .remove(paths)\n\n  return { data, error }\n}\n\n/**\n * List files in a bucket\n */\nexport async function listFiles(\n  supabase: TypedSupabaseClient,\n  bucket: string,\n  path?: string,\n  options?: {\n    limit?: number\n    offset?: number\n    sortBy?: {\n      column: 'name' | 'id' | 'updated_at' | 'created_at' | 'last_accessed_at'\n      order: 'asc' | 'desc'\n    }\n    search?: string\n  }\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage\n    .from(bucket)\n    .list(path, options)\n\n  return { data, error }\n}\n\n/**\n * Move a file within Supabase Storage\n */\nexport async function moveFile(\n  supabase: TypedSupabaseClient,\n  bucket: string,\n  fromPath: string,\n  toPath: string\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage\n    .from(bucket)\n    .move(fromPath, toPath)\n\n  return { data, error }\n}\n\n/**\n * Copy a file within Supabase Storage\n */\nexport async function copyFile(\n  supabase: TypedSupabaseClient,\n  bucket: string,\n  fromPath: string,\n  toPath: string\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage\n    .from(bucket)\n    .copy(fromPath, toPath)\n\n  return { data, error }\n}\n\n/**\n * Get file metadata\n */\nexport async function getFileInfo(\n  supabase: TypedSupabaseClient,\n  bucket: string,\n  path: string\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage\n    .from(bucket)\n    .list(undefined, {\n      search: path.split('/').pop(),\n    })\n\n  if (error) return { data: null, error }\n\n  const file = data?.find(f => f.name === path.split('/').pop())\n  return { data: file || null, error: file ? null : new Error('File not found') }\n}\n\n/**\n * Create a bucket\n */\nexport async function createBucket(\n  supabase: TypedSupabaseClient,\n  id: string,\n  options: {\n    public: boolean\n    allowedMimeTypes?: string[]\n    fileSizeLimit?: number\n  }\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage\n    .createBucket(id, options)\n\n  return { data, error }\n}\n\n/**\n * List all buckets\n */\nexport async function listBuckets(supabase: TypedSupabaseClient): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage.listBuckets()\n  return { data, error }\n}\n\n/**\n * Delete a bucket\n */\nexport async function deleteBucket(\n  supabase: TypedSupabaseClient,\n  id: string\n): Promise<{ data: any; error: any }> {\n  const { data, error } = await supabase.storage.deleteBucket(id)\n  return { data, error }\n} ","import type { TypedSupabaseClient } from './types'\n\n/**\n * Realtime utility functions for Supabase Realtime\n * Simplified version that works with the current Supabase client\n */\n\nexport type DatabaseChangeEvent = 'INSERT' | 'UPDATE' | 'DELETE' | '*'\n\nexport interface DatabaseChangePayload {\n  schema: string\n  table: string\n  commit_timestamp: string\n  eventType: DatabaseChangeEvent\n  new?: Record<string, any>\n  old?: Record<string, any>\n  errors?: string[]\n}\n\n/**\n * Subscribe to database changes for a specific table\n * Returns a channel that can be unsubscribed from\n */\nexport function subscribeToTable(\n  supabase: TypedSupabaseClient,\n  table: string,\n  event: DatabaseChangeEvent = '*',\n  callback: (payload: any) => void,\n  options?: {\n    schema?: string\n    filter?: string\n  }\n) {\n  const channelName = `table-${table}-${Date.now()}`\n  \n  try {\n    const channel = supabase\n      .channel(channelName)\n      .on(\n        'postgres_changes' as any,\n        {\n          event,\n          schema: options?.schema || 'public',\n          table,\n          filter: options?.filter,\n        } as any,\n        callback\n      )\n      .subscribe()\n\n    return channel\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Subscribe to row-level changes for a specific record\n */\nexport function subscribeToRow(\n  supabase: TypedSupabaseClient,\n  table: string,\n  rowId: string,\n  callback: (payload: any) => void,\n  options?: {\n    schema?: string\n    event?: DatabaseChangeEvent\n  }\n) {\n  return subscribeToTable(\n    supabase,\n    table,\n    options?.event || '*',\n    callback,\n    {\n      schema: options?.schema || 'public',\n      filter: `id=eq.${rowId}`,\n    }\n  )\n}\n\n/**\n * Subscribe to user-specific changes across multiple tables\n */\nexport function subscribeToUserChanges(\n  supabase: TypedSupabaseClient,\n  userId: string,\n  tables: string[],\n  callback: (payload: any) => void,\n  options?: {\n    schema?: string\n  }\n) {\n  return tables.map(table => \n    subscribeToTable(\n      supabase,\n      table,\n      '*',\n      callback,\n      {\n        schema: options?.schema || 'public',\n        filter: `user_id=eq.${userId}`,\n      }\n    )\n  ).filter(Boolean) // Remove null values from failed subscriptions\n}\n\n/**\n * Create a channel for custom realtime operations\n */\nexport function createChannel(\n  supabase: TypedSupabaseClient,\n  channelName: string\n) {\n  return supabase.channel(channelName)\n}\n\n/**\n * Unsubscribe from a channel\n */\nexport async function unsubscribeChannel(\n  supabase: TypedSupabaseClient,\n  channel: any\n) {\n  try {\n    return await supabase.removeChannel(channel)\n  } catch (error) {\n    return 'error'\n  }\n}\n\n/**\n * Clean up multiple channels\n */\nexport async function unsubscribeMultipleChannels(\n  supabase: TypedSupabaseClient,\n  channels: any[]\n) {\n  await Promise.all(\n    channels\n      .filter(Boolean)\n      .map(channel => unsubscribeChannel(supabase, channel))\n  )\n}\n\n/**\n * Helper to check if realtime is available\n */\nexport function isRealtimeAvailable(supabase: TypedSupabaseClient): boolean {\n  return !!(supabase as any).realtime\n}\n\n/**\n * Get the current realtime connection status\n */\nexport function getRealtimeStatus(supabase: TypedSupabaseClient): string {\n  try {\n    return (supabase as any).realtime?.connection?.state || 'unknown'\n  } catch {\n    return 'unavailable'\n  }\n} ","import type { \n  TypedSupabaseClient,\n  Tables, \n  TablesInsert, \n  TablesUpdate\n} from './types'\n\n/**\n * Database operation utilities for Supabase\n */\n\n// Type helpers for better developer experience\nexport type UserRow = Tables<'users'>\nexport type ProductRow = Tables<'products'>\nexport type SubscriptionRow = Tables<'subscriptions'>\nexport type UserProductRow = Tables<'user_products'>\n\nexport type UserInsert = TablesInsert<'users'>\nexport type ProductInsert = TablesInsert<'products'>\nexport type SubscriptionInsert = TablesInsert<'subscriptions'>\nexport type UserProductInsert = TablesInsert<'user_products'>\n\nexport type UserUpdate = TablesUpdate<'users'>\nexport type ProductUpdate = TablesUpdate<'products'>\nexport type SubscriptionUpdate = TablesUpdate<'subscriptions'>\nexport type UserProductUpdate = TablesUpdate<'user_products'>\n\n/**\n * Database operation result type\n */\nexport interface DatabaseResult<T = any> {\n  data: T | null\n  error: string | null\n  success: boolean\n}\n\n/**\n * Database query options\n */\nexport interface QueryOptions {\n  limit?: number\n  offset?: number\n  orderBy?: {\n    column: string\n    ascending?: boolean\n  }\n  filters?: Record<string, any>\n}\n\n/**\n * Users table operations\n */\nexport const users = {\n  /**\n   * Get all users with optional filtering and pagination\n   */\n  async getAll(\n    supabase: TypedSupabaseClient,\n    options: QueryOptions = {}\n  ): Promise<DatabaseResult<UserRow[]>> {\n    try {\n      let query = supabase.from('users').select('*')\n\n      // Apply filters\n      if (options.filters) {\n        Object.entries(options.filters).forEach(([key, value]) => {\n          query = query.eq(key, value)\n        })\n      }\n\n      // Apply ordering\n      if (options.orderBy) {\n        query = query.order(options.orderBy.column, { \n          ascending: options.orderBy.ascending ?? true \n        })\n      }\n\n      // Apply pagination\n      if (options.limit) {\n        query = query.limit(options.limit)\n      }\n      if (options.offset) {\n        query = query.range(options.offset, options.offset + (options.limit ?? 10) - 1)\n      }\n\n      const { data, error } = await query\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Get a user by ID\n   */\n  async getById(\n    supabase: TypedSupabaseClient,\n    id: string\n  ): Promise<DatabaseResult<UserRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', id)\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Get a user by email\n   */\n  async getByEmail(\n    supabase: TypedSupabaseClient,\n    email: string\n  ): Promise<DatabaseResult<UserRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('email', email)\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Create a new user\n   */\n  async create(\n    supabase: TypedSupabaseClient,\n    userData: UserInsert\n  ): Promise<DatabaseResult<UserRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .insert(userData)\n        .select()\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Update a user\n   */\n  async update(\n    supabase: TypedSupabaseClient,\n    id: string,\n    updates: UserUpdate\n  ): Promise<DatabaseResult<UserRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Delete a user\n   */\n  async delete(\n    supabase: TypedSupabaseClient,\n    id: string\n  ): Promise<DatabaseResult<void>> {\n    try {\n      const { error } = await supabase\n        .from('users')\n        .delete()\n        .eq('id', id)\n\n      return {\n        data: null,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  }\n}\n\n/**\n * Products table operations\n */\nexport const products = {\n  /**\n   * Get all products with optional filtering and pagination\n   */\n  async getAll(\n    supabase: TypedSupabaseClient,\n    options: QueryOptions = {}\n  ): Promise<DatabaseResult<ProductRow[]>> {\n    try {\n      let query = supabase.from('products').select('*')\n\n      // Apply filters\n      if (options.filters) {\n        Object.entries(options.filters).forEach(([key, value]) => {\n          query = query.eq(key, value)\n        })\n      }\n\n      // Apply ordering\n      if (options.orderBy) {\n        query = query.order(options.orderBy.column, { \n          ascending: options.orderBy.ascending ?? true \n        })\n      }\n\n      // Apply pagination\n      if (options.limit) {\n        query = query.limit(options.limit)\n      }\n      if (options.offset) {\n        query = query.range(options.offset, options.offset + (options.limit ?? 10) - 1)\n      }\n\n      const { data, error } = await query\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Get a product by ID\n   */\n  async getById(\n    supabase: TypedSupabaseClient,\n    id: string\n  ): Promise<DatabaseResult<ProductRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('products')\n        .select('*')\n        .eq('id', id)\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Create a new product\n   */\n  async create(\n    supabase: TypedSupabaseClient,\n    productData: ProductInsert\n  ): Promise<DatabaseResult<ProductRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('products')\n        .insert(productData)\n        .select()\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Update a product\n   */\n  async update(\n    supabase: TypedSupabaseClient,\n    id: string,\n    updates: ProductUpdate\n  ): Promise<DatabaseResult<ProductRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('products')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Delete a product\n   */\n  async delete(\n    supabase: TypedSupabaseClient,\n    id: string\n  ): Promise<DatabaseResult<void>> {\n    try {\n      const { error } = await supabase\n        .from('products')\n        .delete()\n        .eq('id', id)\n\n      return {\n        data: null,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  }\n}\n\n/**\n * Subscriptions table operations\n */\nexport const subscriptions = {\n  /**\n   * Get all subscriptions with optional filtering and pagination\n   */\n  async getAll(\n    supabase: TypedSupabaseClient,\n    options: QueryOptions = {}\n  ): Promise<DatabaseResult<SubscriptionRow[]>> {\n    try {\n      let query = supabase.from('subscriptions').select(`\n        *,\n        users(*),\n        products(*)\n      `)\n\n      // Apply filters\n      if (options.filters) {\n        Object.entries(options.filters).forEach(([key, value]) => {\n          query = query.eq(key, value)\n        })\n      }\n\n      // Apply ordering\n      if (options.orderBy) {\n        query = query.order(options.orderBy.column, { \n          ascending: options.orderBy.ascending ?? true \n        })\n      }\n\n      // Apply pagination\n      if (options.limit) {\n        query = query.limit(options.limit)\n      }\n      if (options.offset) {\n        query = query.range(options.offset, options.offset + (options.limit ?? 10) - 1)\n      }\n\n      const { data, error } = await query\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Get subscriptions by user ID\n   */\n  async getByUserId(\n    supabase: TypedSupabaseClient,\n    userId: string,\n    options: QueryOptions = {}\n  ): Promise<DatabaseResult<SubscriptionRow[]>> {\n    try {\n      let query = supabase\n        .from('subscriptions')\n        .select(`\n          *,\n          users(*),\n          products(*)\n        `)\n        .eq('user_id', userId)\n\n      // Apply additional filters\n      if (options.filters) {\n        Object.entries(options.filters).forEach(([key, value]) => {\n          query = query.eq(key, value)\n        })\n      }\n\n      // Apply ordering\n      if (options.orderBy) {\n        query = query.order(options.orderBy.column, { \n          ascending: options.orderBy.ascending ?? true \n        })\n      }\n\n      const { data, error } = await query\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Get a subscription by ID\n   */\n  async getById(\n    supabase: TypedSupabaseClient,\n    id: string\n  ): Promise<DatabaseResult<SubscriptionRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('subscriptions')\n        .select(`\n          *,\n          users(*),\n          products(*)\n        `)\n        .eq('id', id)\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Create a new subscription\n   */\n  async create(\n    supabase: TypedSupabaseClient,\n    subscriptionData: SubscriptionInsert\n  ): Promise<DatabaseResult<SubscriptionRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('subscriptions')\n        .insert(subscriptionData)\n        .select(`\n          *,\n          users(*),\n          products(*)\n        `)\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Update a subscription\n   */\n  async update(\n    supabase: TypedSupabaseClient,\n    id: string,\n    updates: SubscriptionUpdate\n  ): Promise<DatabaseResult<SubscriptionRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('subscriptions')\n        .update(updates)\n        .eq('id', id)\n        .select(`\n          *,\n          users(*),\n          products(*)\n        `)\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Delete a subscription\n   */\n  async delete(\n    supabase: TypedSupabaseClient,\n    id: string\n  ): Promise<DatabaseResult<void>> {\n    try {\n      const { error } = await supabase\n        .from('subscriptions')\n        .delete()\n        .eq('id', id)\n\n      return {\n        data: null,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  }\n}\n\n/**\n * User Products table operations (for multi-tenant functionality)\n */\nexport const userProducts = {\n  /**\n   * Get all user-product relationships with optional filtering\n   */\n  async getAll(\n    supabase: TypedSupabaseClient,\n    options: QueryOptions = {}\n  ): Promise<DatabaseResult<UserProductRow[]>> {\n    try {\n      let query = supabase.from('user_products').select(`\n        *,\n        users(*),\n        products(*)\n      `)\n\n      // Apply filters\n      if (options.filters) {\n        Object.entries(options.filters).forEach(([key, value]) => {\n          query = query.eq(key, value)\n        })\n      }\n\n      // Apply ordering\n      if (options.orderBy) {\n        query = query.order(options.orderBy.column, { \n          ascending: options.orderBy.ascending ?? true \n        })\n      }\n\n      const { data, error } = await query\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Get user-product relationships by user ID\n   */\n  async getByUserId(\n    supabase: TypedSupabaseClient,\n    userId: string\n  ): Promise<DatabaseResult<UserProductRow[]>> {\n    try {\n      const { data, error } = await supabase\n        .from('user_products')\n        .select(`\n          *,\n          users(*),\n          products(*)\n        `)\n        .eq('user_id', userId)\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Get user-product relationships by product ID\n   */\n  async getByProductId(\n    supabase: TypedSupabaseClient,\n    productId: string\n  ): Promise<DatabaseResult<UserProductRow[]>> {\n    try {\n      const { data, error } = await supabase\n        .from('user_products')\n        .select(`\n          *,\n          users(*),\n          products(*)\n        `)\n        .eq('product_id', productId)\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Get a specific user-product relationship\n   */\n  async getByUserAndProduct(\n    supabase: TypedSupabaseClient,\n    userId: string,\n    productId: string\n  ): Promise<DatabaseResult<UserProductRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('user_products')\n        .select(`\n          *,\n          users(*),\n          products(*)\n        `)\n        .eq('user_id', userId)\n        .eq('product_id', productId)\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Create a new user-product relationship\n   */\n  async create(\n    supabase: TypedSupabaseClient,\n    userProductData: UserProductInsert\n  ): Promise<DatabaseResult<UserProductRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('user_products')\n        .insert(userProductData)\n        .select(`\n          *,\n          users(*),\n          products(*)\n        `)\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Update a user-product relationship\n   */\n  async update(\n    supabase: TypedSupabaseClient,\n    id: string,\n    updates: UserProductUpdate\n  ): Promise<DatabaseResult<UserProductRow>> {\n    try {\n      const { data, error } = await supabase\n        .from('user_products')\n        .update(updates)\n        .eq('id', id)\n        .select(`\n          *,\n          users(*),\n          products(*)\n        `)\n        .single()\n\n      return {\n        data,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Delete a user-product relationship\n   */\n  async delete(\n    supabase: TypedSupabaseClient,\n    id: string\n  ): Promise<DatabaseResult<void>> {\n    try {\n      const { error } = await supabase\n        .from('user_products')\n        .delete()\n        .eq('id', id)\n\n      return {\n        data: null,\n        error: error?.message || null,\n        success: !error\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  }\n}\n\n/**\n * Database health check and utility functions\n */\nexport const database = {\n  /**\n   * Check database connection health\n   */\n  async healthCheck(supabase: TypedSupabaseClient): Promise<DatabaseResult<{ status: string }>> {\n    try {\n      // Simple query to test connection\n      const { data, error } = await supabase\n        .from('users')\n        .select('count')\n        .limit(1)\n\n      if (error) {\n        return {\n          data: null,\n          error: `Database health check failed: ${error.message}`,\n          success: false\n        }\n      }\n\n      return {\n        data: { status: 'healthy' },\n        error: null,\n        success: true\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Database connection failed',\n        success: false\n      }\n    }\n  },\n\n  /**\n   * Get table information\n   */\n  async getTableInfo(\n    supabase: TypedSupabaseClient,\n    tableName: string\n  ): Promise<DatabaseResult<{ count: number }>> {\n    try {\n      const { count, error } = await supabase\n        .from(tableName)\n        .select('*', { count: 'exact', head: true })\n\n      if (error) {\n        return {\n          data: null,\n          error: error.message,\n          success: false\n        }\n      }\n\n      return {\n        data: { count: count || 0 },\n        error: null,\n        success: true\n      }\n    } catch (err) {\n      return {\n        data: null,\n        error: err instanceof Error ? err.message : 'Unknown error',\n        success: false\n      }\n    }\n  }\n}\n\n/**\n * Utility function to validate required fields\n */\nexport function validateRequired<T extends Record<string, any>>(\n  data: T,\n  requiredFields: (keyof T)[]\n): { isValid: boolean; missingFields: string[] } {\n  const missingFields: string[] = []\n\n  requiredFields.forEach(field => {\n    if (!data[field] || (typeof data[field] === 'string' && data[field].trim() === '')) {\n      missingFields.push(String(field))\n    }\n  })\n\n  return {\n    isValid: missingFields.length === 0,\n    missingFields\n  }\n}\n\n/**\n * Utility function to sanitize email addresses\n */\nexport function sanitizeEmail(email: string): string {\n  return email.toLowerCase().trim()\n}\n\n/**\n * Utility function to generate database error responses\n */\nexport function createErrorResponse<T = any>(\n  error: string,\n  data: T | null = null\n): DatabaseResult<T> {\n  return {\n    data,\n    error,\n    success: false\n  }\n}\n\n/**\n * Utility function to generate successful database responses\n */\nexport function createSuccessResponse<T = any>(data: T): DatabaseResult<T> {\n  return {\n    data,\n    error: null,\n    success: true\n  }\n} "],"mappings":"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","names":["createSupabaseServerClient"]}